//WAP to understand circular linked list
#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
    int data;
    struct node *next;
}Node;
Node* Head = NULL;
Node *CreateNode(int ele)
{
    Node* NewNode = (Node*)malloc(sizeof(Node));
    NewNode -> data = ele;
    NewNode -> next = NULL;
    return NewNode;
}
void insertNodeInBeg(int ele)
{
    Node* NewNode = CreateNode(ele);
    if (Head == NULL)
    {
        Head = NewNode;
        NewNode -> next = Head;
    }
    else
    {
        NewNode -> next = Head;
        Node* temp = Head;
        while (temp -> next != Head)
        {
            temp = temp -> next;
        }
        temp -> next = NewNode;
        Head = NewNode;
    }
    printf("Node Inserted !!!\n");
}
void insertNodeAtEnd(int ele)
{
    Node* NewNode = CreateNode(ele);
    if (Head == NULL)
    {
        Head = NewNode;
        NewNode -> next = Head;
    }
    else
    {
        Node* temp = Head;
        while (temp -> next != Head)
        {
            temp = temp -> next;
        }
        temp -> next = NewNode;
        NewNode ->next = Head;
    }
    printf("Node Inserted !!!\n");
}
void insertNodeAtAnyPosition(int ele, int position)
{
    if (Head == NULL)
    {
        printf("List is empty !!!\n");
    }
    else if (position == 1)
    {
        insertNodeInBeg(ele);
    }
    else
    {
        int i = 1;
        Node* temp = Head;
        while (i < (position-1) && temp -> next != Head)
        {
            temp = temp -> next;
            i++;
        }
        if (temp -> next != Head && position>0)
        {
            Node* NewNode = CreateNode(ele);
            NewNode -> next = temp -> next;
            temp -> next = NewNode;
            printf("Node Inserted !!!\n");
        }
        else
        {
            printf("Invalid Position !!!\n");
        }
    }
}
void deleteNodeFromBeg()
{
    if (Head == NULL)
    {
        printf("List is empty !!!\n");
    }
    else if (Head -> next == Head)
    {
        Node * temp = Head;
        Head = NULL;
        free(temp);
        printf("Node deleted !!!\n");
    }
    else
    {
        Node *t = Head;
        Node *temp = Head;
        while (temp -> next != Head)
        {
            temp = temp -> next;
        }
        Head = Head -> next;
        temp -> next = Head;
        free(t);
        printf("Node deleted !!!\n");
    }
}
void deleteNodeFromEnd()
{
    if (Head == NULL)
    {
        printf("List is empty !!!\n");
    }
    else if (Head -> next == Head)
    {
        Node * temp = Head;
        Head = NULL;
        free(temp);
        printf("Node deleted !!!\n");
    }
    else
    {
        Node *temp = Head;
        while (temp -> next -> next != Head)
        {
            temp = temp -> next;
        }
        Node* t = temp -> next;
        temp -> next = Head;
        free(t);
        printf("Node deleted !!!\n");
    }
}
void deleteNodeFromAnyPosition(int position)
{
    if (Head == NULL)
    {
        printf("List is empty !!!\n");
    }
    else if (position == 1)
    {
        deleteNodeFromBeg();
    }
    else
    {
        int i = 1;
        Node* temp = Head;
        while (i < (position-1) && temp -> next != Head)
        {
            temp = temp -> next;
            i++;
        }
        if (temp -> next != Head && position>0)
        {
            Node *temporary = temp ->next;
            temp -> next = temp -> next -> next;
            free(temporary);
            printf("Node Deleted !!!\n");
        }
        else
        {
            printf("Invalid Position !!!\n");
        }
    }
}
void search(int target)
{
    if (Head == NULL)
    {
        printf("List is empty !!!\n");
    }
    else
    {
        Node *temp = Head;
        do
        {
            if (temp -> data == target)
            {
                printf("Found !!!\n");
                return;
            }
            temp = temp -> next;
        }while (temp != Head);
        printf("Not Found !!!\n");
    }
}
void display()
{
    if (Head == NULL)
    {
        printf("List is empty");
    }
    else
    {
        Node* temp = Head;
        do
        {
            printf("%d ",temp -> data);
            temp = temp -> next;
        } while (temp != Head);
    }
}
int main()
{
    while (1)
    {
        printf("------ Circular singly Linked List ------\n");
    }
}
